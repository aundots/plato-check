import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(const BatchApp());
}

class BatchApp extends StatefulWidget {
  const BatchApp({Key? key}) : super(key: key);

  @override
  _BatchAppState createState() => _BatchAppState();
}

class _BatchAppState extends State<BatchApp> {
  ThemeMode _themeMode = ThemeMode.system;

  @override
  void initState() {
    super.initState();
    _loadThemePreference();
  }

  Future<void> _loadThemePreference() async {
    final prefs = await SharedPreferences.getInstance();
    final isDarkMode = prefs.getBool('isDarkMode') ?? false;
    setState(() {
      _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;
    });
  }

  Future<void> _saveThemePreference(bool isDarkMode) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('isDarkMode', isDarkMode);
    setState(() {
      _themeMode = isDarkMode ? ThemeMode.dark : ThemeMode.light;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Batch Tracker',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        brightness: Brightness.light,
      ),
      darkTheme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.blue,
      ),
      themeMode: _themeMode,
      home: BatchListScreen(onThemeChanged: _saveThemePreference),
    );
  }
}

class BatchListScreen extends StatefulWidget {
  final Function(bool) onThemeChanged;

  const BatchListScreen({Key? key, required this.onThemeChanged}) : super(key: key);

  @override
  _BatchListScreenState createState() => _BatchListScreenState();
}

class _BatchListScreenState extends State<BatchListScreen> {
  Map<String, dynamic> data = {};
  final TextEditingController batchController = TextEditingController();
  bool _isDarkMode = false;

  @override
  void initState() {
    super.initState();
    _loadData();
    _loadThemeState();
  }

  Future<void> _loadThemeState() async {
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      _isDarkMode = prefs.getBool('isDarkMode') ?? false;
    });
  }

  Future<File> _getLocalFile() async {
    final dir = await getApplicationDocumentsDirectory();
    return File('${dir.path}/data.json');
  }

  Future<void> _loadData() async {
    try {
      final file = await _getLocalFile();
      if (await file.exists()) {
        final content = await file.readAsString();
        setState(() {
          data = json.decode(content) as Map<String, dynamic>;
        });
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error loading data: $e')),
        );
      }
    }
  }

  Future<void> _saveData() async {
    try {
      final file = await _getLocalFile();
      await file.writeAsString(json.encode(data));
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving data: $e')),
        );
      }
    }
  }

  void _addBatch() {
    final batchNumber = batchController.text.trim();
    if (batchNumber.isNotEmpty && !data.containsKey(batchNumber)) {
      setState(() {
        data[batchNumber] = {
          'created': DateFormat('MM-dd HH:mm').format(DateTime.now()),
          'plato': <Map<String, String>>[],
        };
      });
      _saveData();
      batchController.clear();
    }
  }

  void _deleteBatch(String batch) {
    setState(() {
      data.remove(batch);
    });
    _saveData();
  }

  void _editBatch(String oldBatch) {
    final editController = TextEditingController(text: oldBatch);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Edit Batch'),
        content: TextField(
          controller: editController,
          decoration: const InputDecoration(hintText: 'Enter new batch name'),
          onSubmitted: (value) => _updateBatch(oldBatch, value, context),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => _updateBatch(oldBatch, editController.text, context),
            child: const Text('Save'),
          ),
        ],
      ),
    );
  }

  void _updateBatch(String oldBatch, String newBatch, BuildContext context) {
    final trimmedBatch = newBatch.trim();
    if (trimmedBatch.isNotEmpty && trimmedBatch != oldBatch && !data.containsKey(trimmedBatch)) {
      setState(() {
        final batchData = data[oldBatch];
        data.remove(oldBatch);
        data[trimmedBatch] = batchData;
      });
      _saveData();
    }
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    final batchList = data.keys.toList().reversed.toList();

    return Scaffold(
      appBar: AppBar(
        title: const Text('Batch List'),
        actions: [
          Switch(
            value: _isDarkMode,
            onChanged: (value) {
              setState(() {
                _isDarkMode = value;
              });
              widget.onThemeChanged(value);
            },
            activeThumbImage: const AssetImage('assets/moon.png'), // 다크 모드 아이콘 (선택적)
            inactiveThumbImage: const AssetImage('assets/sun.png'), // 라이트 모드 아이콘 (선택적)
          ),
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: () {
              String shareContent = 'Batch List:\n';
              data.forEach((key, value) {
                shareContent += '$key - Created: ${value['created']}\n';
              });
              Share.share(shareContent);
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: batchController,
                    decoration: const InputDecoration(hintText: 'Enter Batch Number'),
                    onSubmitted: (_) => _addBatch(),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _addBatch,
                  child: const Text('Add'),
                ),
              ],
            ),
          ),
          Expanded(
            child: batchList.isEmpty
                ? const Center(child: Text('No batches available'))
                : ListView.builder(
              itemCount: batchList.length,
              itemBuilder: (context, index) {
                final batch = batchList[index];
                return ListTile(
                  title: Text('$batch | Created: ${data[batch]['created']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: const Icon(Icons.edit),
                        onPressed: () => _editBatch(batch),
                      ),
                      IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () => _deleteBatch(batch),
                      ),
                    ],
                  ),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => PlatoScreen(
                          batch: batch,
                          data: data,
                          saveData: _saveData,
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

class PlatoScreen extends StatefulWidget {
  final String batch;
  final Map<String, dynamic> data;
  final VoidCallback saveData;

  const PlatoScreen({
    Key? key,
    required this.batch,
    required this.data,
    required this.saveData,
  }) : super(key: key);

  @override
  _PlatoScreenState createState() => _PlatoScreenState();
}

class _PlatoScreenState extends State<PlatoScreen> {
  final TextEditingController platoController = TextEditingController();

  void _savePlato() {
    final platoValue = platoController.text.trim();
    if (platoValue.isNotEmpty) {
      setState(() {
        widget.data[widget.batch]['plato'].add({
          'value': platoValue,
          'timestamp': DateFormat('MM-dd HH:mm').format(DateTime.now()),
        });
      });
      widget.saveData();
      platoController.clear();
    }
  }

  void _deletePlato(int index) {
    setState(() {
      widget.data[widget.batch]['plato'].removeAt(index);
    });
    widget.saveData();
  }

  void _editPlato(int index) {
    final platoItem = widget.data[widget.batch]['plato'][index];
    final editController = TextEditingController(text: platoItem['value']);
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Edit Plato'),
        content: TextField(
          controller: editController,
          decoration: const InputDecoration(hintText: 'Enter new plato value'),
          onSubmitted: (value) => _updatePlato(index, value, context),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () => _updatePlato(index, editController.text, context),
            child: const Text('Save'),
          ),
        ],
      ),
    );
  }

  void _updatePlato(int index, String newValue, BuildContext context) {
    final trimmedValue = newValue.trim();
    if (trimmedValue.isNotEmpty) {
      setState(() {
        widget.data[widget.batch]['plato'][index]['value'] = trimmedValue;
        widget.data[widget.batch]['plato'][index]['timestamp'] =
            DateFormat('MM-dd HH:mm').format(DateTime.now());
      });
      widget.saveData();
    }
    Navigator.pop(context);
  }

  @override
  Widget build(BuildContext context) {
    final platoList = widget.data[widget.batch]['plato'] as List<dynamic>? ?? [];

    return Scaffold(
      appBar: AppBar(title: Text('Plato for ${widget.batch}')),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: platoController,
                    decoration: const InputDecoration(hintText: 'Enter Plato'),
                    onSubmitted: (_) => _savePlato(),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _savePlato,
                  child: const Text('Save'),
                ),
              ],
            ),
          ),
          Expanded(
            child: platoList.isEmpty
                ? const Center(child: Text('No plato values available'))
                : ListView.builder(
              itemCount: platoList.length,
              itemBuilder: (context, index) {
                final item = platoList[index];
                return ListTile(
                  title: Text('Plato: ${item['value']} | ${item['timestamp']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: const Icon(Icons.edit),
                        onPressed: () => _editPlato(index),
                      ),
                      IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () => _deletePlato(index),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
