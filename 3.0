import 'dart:convert';
import 'dart:io';
import 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:fl_chart/fl_chart.dart';

/// Global measurement mode variable.
/// false = use Plato (default), true = use Specific Gravity (SG)
bool useSG = false;

/// Converts Plato to Specific Gravity (SG) using the Balling formula.
double platoToSG(double plato) {
  return 1 + (plato / (258.6 - ((plato / 258.2) * 227.1)));
}

/// Converts Specific Gravity (SG) to Plato using an approximate inverse formula.
double sgToPlato(double sg) {
  return 258.6 * (sg - 1) / (1 + 0.8789 * (sg - 1));
}

/// Calculates ABV% (or ALC%) as (OG - SG) * 131.25.
double calculateABV(double currentPlato, double initialPlato) {
  final og = platoToSG(initialPlato);
  final sg = platoToSG(currentPlato);
  return (og - sg) * 131.25;
}

/// A cached DateFormat instance to avoid repeated re-creation.
final DateFormat _dateFormat = DateFormat('MM-dd HH:mm');

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const BatchApp());
}

class BatchApp extends StatelessWidget {
  const BatchApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Batch Tracker',
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.blue,
      ),
      home: const BatchListScreen(),
    );
  }
}

class BatchListScreen extends StatefulWidget {
  const BatchListScreen({Key? key}) : super(key: key);

  @override
  _BatchListScreenState createState() => _BatchListScreenState();
}

class _BatchListScreenState extends State<BatchListScreen> {
  Map<String, dynamic> data = {};
  final TextEditingController batchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  @override
  void dispose() {
    batchController.dispose();
    super.dispose();
  }

  Future<File> get _localFile async {
    final dir = await getApplicationDocumentsDirectory();
    return File('${dir.path}/data.json');
  }

  Future<void> _loadData() async {
    try {
      final file = await _localFile;
      if (await file.exists()) {
        final content = await file.readAsString();
        setState(() => data = json.decode(content));
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error loading data: $e')));
    }
  }

  Future<void> _saveData() async {
    try {
      final file = await _localFile;
      await file.writeAsString(json.encode(data));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error saving data: $e')));
    }
  }

  Future<void> _exportToCSV() async {
    final buffer = StringBuffer();
    buffer.writeln('Batch,Date,Plato Value,Date');
    for (var entry in data.entries) {
      final batch = entry.key;
      final date = entry.value['date'];
      final platos = entry.value['plato'] as List<dynamic>;
      if (platos.isEmpty) {
        buffer.writeln('$batch,$date,,');
      } else {
        for (var p in platos) {
          buffer.writeln('$batch,$date,${p['value']},${p['date']}');
        }
      }
    }
    final dir = await getTemporaryDirectory();
    final file = File('${dir.path}/batches.csv');
    await file.writeAsString(buffer.toString());
    Share.shareXFiles([XFile(file.path)], text: 'Batch Data Export');
  }

  void _addBatch() {
    final batch = batchController.text.trim();
    if (batch.isNotEmpty && !data.containsKey(batch)) {
      setState(() {
        data[batch] = {
          'date': _dateFormat.format(DateTime.now()),
          'plato': <Map<String, String>>[],
        };
      });
      _saveData();
      batchController.clear();
    }
  }

  void _confirmDeleteBatch(String batch) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: Text('Are you sure you want to delete the batch "$batch"?'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          TextButton(
              onPressed: () {
                Navigator.pop(context);
                setState(() {
                  data.remove(batch);
                });
                _saveData();
              },
              child: const Text('Delete')),
        ],
      ),
    );
  }

  void _editBatch(String oldBatch) {
    final nameController = TextEditingController(text: oldBatch);
    DateTime selectedDate;
    try {
      selectedDate = _dateFormat.parse(data[oldBatch]['date']);
      selectedDate = DateTime(
          DateTime.now().year,
          selectedDate.month,
          selectedDate.day,
          selectedDate.hour,
          selectedDate.minute);
    } catch (e) {
      selectedDate = DateTime.now();
    }
    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
            builder: (context, setStateDialog) {
          return AlertDialog(
            title: const Text('Edit Batch'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration:
                      const InputDecoration(labelText: 'Batch Name'),
                ),
                const SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: Text('Date: ${_dateFormat.format(selectedDate)}'),
                    ),
                    IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime:
                                  TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        }),
                  ],
                ),
              ],
            ),
            actions: [
              TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel')),
              TextButton(
                  onPressed: () {
                    final newName = nameController.text.trim();
                    if (newName.isNotEmpty &&
                        (!data.containsKey(newName) ||
                            newName == oldBatch)) {
                      setState(() {
                        final temp = data[oldBatch];
                        data.remove(oldBatch);
                        temp['date'] = _dateFormat.format(selectedDate);
                        data[newName] = temp;
                      });
                      _saveData();
                      Navigator.pop(context);
                    }
                  },
                  child: const Text('Save')),
            ],
          );
        });
      },
    );
  }

  void _sendFeedback() async {
    final Uri emailLaunchUri = Uri(
      scheme: 'mailto',
      path: 'ga72qah@gmail.com',
      query: Uri.encodeFull(
          'subject=Batch Tracker Feedback&body=Hello,\n\nI would like to share the following feedback:\n'),
    );
    if (await canLaunchUrl(emailLaunchUri)) {
      await launchUrl(emailLaunchUri,
          mode: LaunchMode.externalApplication);
    } else {
      final Uri gmailUri = Uri.parse(
          'https://mail.google.com/mail/?view=cm&fs=1&to=ga72qah@gmail.com&su=Batch+Tracker+Feedback&body=Hello,%0A%0AI+would+like+to+share+the+following+feedback:%0A');
      if (await canLaunchUrl(gmailUri)) {
        await launchUrl(gmailUri, mode: LaunchMode.externalApplication);
      } else {
        final Uri outlookUri = Uri.parse(
            'https://outlook.live.com/owa/?path=/mail/action/compose&to=ga72qah@gmail.com&subject=Batch%20Tracker%20Feedback&body=Hello,');
        if (await canLaunchUrl(outlookUri)) {
          await launchUrl(outlookUri,
              mode: LaunchMode.externalApplication);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('No email client available')));
        }
      }
    }
  }

  void _launchEinGlas() async {
    final url = Uri.parse('https://ein-glas.com');
    if (!await launchUrl(url, mode: LaunchMode.externalApplication)) {
      throw 'Could not launch $url';
    }
  }

  // Open the settings screen from a gear icon.
  void _openSettings() {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const SettingsScreen()),
    ).then((_) {
      setState(() {}); // Refresh UI after settings change.
    });
  }

  @override
  Widget build(BuildContext context) {
    final batchList = data.keys.toList().reversed.toList();
    return Scaffold(
      appBar: AppBar(
        title: const Text('Batch List'),
        actions: [
          IconButton(
              icon: const Icon(Icons.settings), onPressed: _openSettings),
          IconButton(
              icon: const Icon(Icons.share), onPressed: _exportToCSV),
        ],
      ),
      body: Stack(
        children: [
          Column(
            children: [
              Padding(
                padding: const EdgeInsets.all(10),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: batchController,
                        decoration: const InputDecoration(
                          hintText: 'Enter Batch Number',
                        ),
                        onSubmitted: (_) => _addBatch(),
                      ),
                    ),
                    const SizedBox(width: 10),
                    ElevatedButton(
                        onPressed: _addBatch, child: const Text('Add')),
                  ],
                ),
              ),
              Expanded(
                child: batchList.isEmpty
                    ? const Center(
                        child: Text(
                            'Your batch list is empty. Create your first batch!'))
                    : ListView.builder(
                        itemCount: batchList.length,
                        itemBuilder: (context, index) {
                          final batch = batchList[index];
                          final platoList =
                              data[batch]['plato'] as List<dynamic>;
                          final subtitle = platoList.isNotEmpty
                              ? 'Latest ${useSG ? "SG" : "Plato"}: ${useSG ? platoToSG(double.tryParse(platoList.last['value']) ?? 0).toStringAsFixed(3) : platoList.last['value']} at ${platoList.last['date']}'
                              : 'No data recorded';
                          return ListTile(
                            title: Text('$batch | ${data[batch]['date']}'),
                            subtitle: Text(subtitle),
                            trailing: Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                IconButton(
                                    icon: const Icon(Icons.edit),
                                    onPressed: () => _editBatch(batch)),
                                IconButton(
                                    icon: const Icon(Icons.delete),
                                    onPressed: () => _confirmDeleteBatch(batch)),
                              ],
                            ),
                            onTap: () async {
                              await Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => PlatoScreen(
                                    batch: batch,
                                    data: data,
                                    saveData: _saveData,
                                  ),
                                ),
                              );
                              setState(() {});
                            },
                          );
                        },
                      ),
              ),
              const SizedBox(height: 60),
            ],
          ),
          Positioned(
            bottom: 10,
            left: 20,
            right: 20,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ElevatedButton.icon(
                      onPressed: _sendFeedback,
                      icon: const Icon(Icons.feedback),
                      label: const Text('Send Feedback'),
                      style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blueAccent),
                    ),
                    GestureDetector(
                      onTap: _launchEinGlas,
                      child: Image.asset(
                        'assets/logo.jpg',
                        height: 40,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                const Align(
                  alignment: Alignment.bottomRight,
                  child: Text(
                    'Created by Dipl.Brmst Taesoon',
                    style: TextStyle(color: Colors.white70, fontSize: 12),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class SettingsScreen extends StatefulWidget {
  const SettingsScreen({Key? key}) : super(key: key);
  @override
  _SettingsScreenState createState() => _SettingsScreenState();
}
class _SettingsScreenState extends State<SettingsScreen> {
  bool _useSG = useSG;
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Settings"),
      ),
      body: ListTile(
        title: const Text("Use Specific Gravity (SG)"),
        trailing: Switch(
          value: _useSG,
          onChanged: (value) {
            setState(() {
              _useSG = value;
            });
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        child: const Icon(Icons.save),
        onPressed: () {
          useSG = _useSG;
          Navigator.pop(context);
        },
      ),
    );
  }
}

class PlatoScreen extends StatefulWidget {
  final String batch;
  final Map<String, dynamic> data;
  final VoidCallback saveData;

  const PlatoScreen({
    Key? key,
    required this.batch,
    required this.data,
    required this.saveData,
  }) : super(key: key);

  @override
  _PlatoScreenState createState() => _PlatoScreenState();
}

class _PlatoScreenState extends State<PlatoScreen> {
  final TextEditingController platoController = TextEditingController();
  final TextEditingController fermentationController = TextEditingController();
  // Target measurement prediction controller.
  final TextEditingController targetPlatoController = TextEditingController();
  double? predictedFG; // Predicted final gravity (stored in Plato).
  String predictionResult = "";

  @override
  void initState() {
    super.initState();
    fermentationController.addListener(_calculatePredictedFG);
  }

  @override
  void dispose() {
    platoController.dispose();
    fermentationController.dispose();
    targetPlatoController.dispose();
    super.dispose();
  }

  void _calculatePredictedFG() {
    if (widget.data[widget.batch]['plato'].isNotEmpty &&
        fermentationController.text.isNotEmpty) {
      final initialPlato =
          double.tryParse(widget.data[widget.batch]['plato'][0]['value']);
      final fermentationPercent =
          double.tryParse(fermentationController.text);
      if (initialPlato != null && fermentationPercent != null) {
        setState(() {
          predictedFG = initialPlato * (1 - fermentationPercent / 100);
        });
      }
    } else {
      setState(() {
        predictedFG = null;
      });
    }
  }

  // Quadratic regression has been replaced by a logistic regression model for prediction.
  // Logistic model: f(x) = L/(1+exp(-k*(x-t0))) where x is minutes elapsed since baseTime.
  // Fit model parameters using gradient descent.
  Map<String, double>? _fitLogisticRegression() {
    List<dynamic> list = widget.data[widget.batch]['plato'];
    if (list.length < 2) return null;
    List<double> x = [];
    List<double> y = [];
    DateTime baseTime;
    try {
      baseTime = _dateFormat.parse(list[0]['date']);
      baseTime = DateTime(baseTime.year, baseTime.month, baseTime.day,
          baseTime.hour, baseTime.minute);
    } catch (e) {
      return null;
    }
    for (var p in list) {
      try {
        DateTime dt = _dateFormat.parse(p['date']);
        dt = DateTime(dt.year, dt.month, dt.day, dt.hour, dt.minute);
        x.add(dt.difference(baseTime).inMinutes.toDouble());
        y.add(double.tryParse(p['value']) ?? 0);
      } catch (e) {
        // Skip invalid entries.
      }
    }
    if (x.length < 2) return null;
    double L = y.first;
    double k = -0.01;
    double t0 = x[x.length ~/ 2];
    double lr = 1e-6;
    int iterations = 5000;
    for (int iter = 0; iter < iterations; iter++) {
      double dL = 0, dk = 0, dt0 = 0;
      for (int i = 0; i < x.length; i++) {
        double xi = x[i];
        double yi = y[i];
        double expTerm = math.exp(-k * (xi - t0));
        double pred = L / (1 + expTerm);
        double error = pred - yi;
        double dPred_dL = 1 / (1 + expTerm);
        double dPred_dk = L * (xi - t0) * expTerm / math.pow(1 + expTerm, 2);
        double dPred_dt0 = -L * k * expTerm / math.pow(1 + expTerm, 2);
        dL += 2 * error * dPred_dL;
        dk += 2 * error * dPred_dk;
        dt0 += 2 * error * dPred_dt0;
      }
      L -= lr * dL;
      k -= lr * dk;
      t0 -= lr * dt0;
    }
    return {
      "L": L,
      "k": k,
      "t0": t0,
      "baseTime": baseTime.millisecondsSinceEpoch.toDouble()
    };
  }

  // Predict the time when the target measurement will be reached using the logistic model.
  // Formula: xTarget = t0 - (1/k)*ln((L/target) - 1)
  void _predictTargetTime() {
    Map<String, double>? params = _fitLogisticRegression();
    if (params == null) {
      setState(() {
        predictionResult = "Not enough data for logistic prediction.";
      });
      return;
    }
    double L = params["L"]!;
    double k = params["k"]!;
    double t0 = params["t0"]!;
    int baseTimeEpoch = params["baseTime"]!.toInt();
    double? targetInput = double.tryParse(targetPlatoController.text);
    if (targetInput == null) {
      setState(() {
        predictionResult = "Invalid target value.";
      });
      return;
    }
    // When in SG mode, convert target SG to Plato.
    double targetPlato = useSG ? sgToPlato(targetInput) : targetInput;
    double ratio = (L / targetPlato) - 1;
    if (ratio <= 0 || k == 0) {
      setState(() {
        predictionResult = "Target value out of range.";
      });
      return;
    }
    double xTarget = t0 - (1 / k) * math.log(ratio);
    if (xTarget < 0) {
      setState(() {
        predictionResult = "Target already reached based on trend.";
      });
      return;
    }
    DateTime predictedTime = DateTime.fromMillisecondsSinceEpoch(baseTimeEpoch)
        .add(Duration(minutes: xTarget.round()));
    setState(() {
      predictionResult = "Estimated target reached at: ${_dateFormat.format(predictedTime)}";
    });
  }

  // Save a new measurement; if SG mode is enabled, convert input from SG to Plato before storing.
  void _savePlato() {
    final valueText = platoController.text.trim();
    if (valueText.isNotEmpty) {
      double inputValue = double.tryParse(valueText) ?? 0;
      double storedValue = useSG ? sgToPlato(inputValue) : inputValue;
      setState(() {
        widget.data[widget.batch]['plato'].add({
          'value': storedValue.toStringAsFixed(2),
          'date': _dateFormat.format(DateTime.now()),
        });
      });
      widget.saveData();
      platoController.clear();
      _calculatePredictedFG();
    }
  }

  void _confirmDeletePlato(int index) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: const Text('Are you sure you want to delete this entry?'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          TextButton(
              onPressed: () {
                Navigator.pop(context);
                setState(() {
                  widget.data[widget.batch]['plato'].removeAt(index);
                });
                widget.saveData();
                _calculatePredictedFG();
              },
              child: const Text('Delete')),
        ],
      ),
    );
  }

  void _editPlato(int index) {
    final valueController = TextEditingController(
      text: widget.data[widget.batch]['plato'][index]['value'],
    );
    DateTime selectedDate;
    try {
      selectedDate = _dateFormat.parse(widget.data[widget.batch]['plato'][index]['date']);
      selectedDate = DateTime(
          DateTime.now().year,
          selectedDate.month,
          selectedDate.day,
          selectedDate.hour,
          selectedDate.minute);
    } catch (e) {
      selectedDate = DateTime.now();
    }
    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
            builder: (context, setStateDialog) {
          return AlertDialog(
            title: const Text('Edit Entry'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: valueController,
                  decoration: InputDecoration(
                    labelText: useSG ? 'Enter SG' : 'Enter Plato',
                  ),
                ),
                const SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: Text('Date: ${_dateFormat.format(selectedDate)}'),
                    ),
                    IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        }),
                  ],
                ),
              ],
            ),
            actions: [
              TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel')),
              TextButton(
                  onPressed: () {
                    final newVal = valueController.text.trim();
                    if (newVal.isNotEmpty) {
                      double inputValue = double.tryParse(newVal) ?? 0;
                      double storedValue = useSG ? sgToPlato(inputValue) : inputValue;
                      setState(() {
                        widget.data[widget.batch]['plato'][index]['value'] =
                            storedValue.toStringAsFixed(2);
                        widget.data[widget.batch]['plato'][index]['date'] =
                            _dateFormat.format(selectedDate);
                      });
                      widget.saveData();
                      Navigator.pop(context);
                      _calculatePredictedFG();
                    }
                  },
                  child: const Text('Save')),
            ],
          );
        });
      },
    );
  }

  /// Builds the chart.
  /// The left Y-axis displays the stored measurements (converted to SG if needed, with three decimals if SG mode is on).
  /// The right Y-axis displays ALC% calculated via the Balling formula.
  Widget _buildLineChart(List<dynamic> platoList) {
    if (platoList.isEmpty) {
      return const Center(
        child: Text('No values available to display chart'),
      );
    }
    final List<FlSpot> spots = [];
    final Map<double, String> dateLabels = {};
    for (int i = 0; i < platoList.length; i++) {
      final point = platoList[i];
      double platoValue = double.tryParse(point['value']) ?? 0;
      spots.add(FlSpot(i.toDouble(), platoValue));
      dateLabels[i.toDouble()] = point['date'];
    }
    double minY = spots.map((s) => s.y).reduce((a, b) => a < b ? a : b);
    double maxY = spots.map((s) => s.y).reduce((a, b) => a > b ? a : b);
    if (minY == maxY) {
      minY = minY - 1;
      maxY = maxY + 1;
    }
    double? initialPlato;
    if (widget.data[widget.batch]['plato'].isNotEmpty) {
      initialPlato = double.tryParse(widget.data[widget.batch]['plato'][0]['value']);
    }
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: LineChart(
        LineChartData(
          clipData: FlClipData.all(),
          minY: minY,
          maxY: maxY,
          gridData: FlGridData(show: true),
          borderData: FlBorderData(show: true),
          lineBarsData: [
            LineChartBarData(
              spots: spots,
              isCurved: true,
              barWidth: 3,
              dotData: FlDotData(show: true),
            ),
          ],
          titlesData: FlTitlesData(
            bottomTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 40,
                interval: 1,
                getTitlesWidget: (double value, TitleMeta meta) {
                  final label = dateLabels[value];
                  if (label == null) {
                    return SideTitleWidget(
                      meta: meta,
                      child: const Text(''),
                    );
                  }
                  final parts = label.split(' ');
                  final datePart = parts.isNotEmpty ? parts[0] : '';
                  final timePart = parts.length > 1 ? parts[1] : '';
                  return SideTitleWidget(
                    meta: meta,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(datePart, style: const TextStyle(fontSize: 10)),
                        Text(timePart, style: const TextStyle(fontSize: 10)),
                      ],
                    ),
                  );
                },
              ),
            ),
            leftTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 45,
                interval: (maxY - minY) / 5,
                getTitlesWidget: (double value, TitleMeta meta) {
                  double displayValue = useSG ? platoToSG(value) : value;
                  return SideTitleWidget(
                    meta: meta,
                    child: Text(
                      useSG ? displayValue.toStringAsFixed(3) : displayValue.toStringAsFixed(2),
                      style: const TextStyle(fontSize: 10),
                    ),
                  );
                },
              ),
              axisNameWidget: RotatedBox(
                quarterTurns: 1,
                child: Text(
                  useSG ? "SG" : "Plato",
                  style: const TextStyle(fontSize: 12, color: Colors.white),
                ),
              ),
              axisNameSize: 30,
            ),
            topTitles: AxisTitles(
              sideTitles: SideTitles(showTitles: false),
            ),
            rightTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 45,
                interval: (maxY - minY) / 5,
                getTitlesWidget: (double value, TitleMeta meta) {
                  if (initialPlato == null) {
                    return SideTitleWidget(meta: meta, child: const Text(''));
                  }
                  double abv = calculateABV(value, initialPlato);
                  return SideTitleWidget(
                    meta: meta,
                    child: Text('${abv.toStringAsFixed(1)}%', style: const TextStyle(fontSize: 10)),
                  );
                },
              ),
              axisNameWidget: RotatedBox(
                quarterTurns: 1,
                child: const Text(
                  "ALC%",
                  style: TextStyle(fontSize: 12, color: Colors.white),
                ),
              ),
              axisNameSize: 30,
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final platoList = widget.data[widget.batch]['plato'] as List<dynamic>;
    final estimatedALC = (predictedFG != null && widget.data[widget.batch]['plato'].isNotEmpty)
        ? calculateABV(predictedFG!, double.tryParse(widget.data[widget.batch]['plato'][0]['value']) ?? 0)
        : null;
    return Scaffold(
      appBar: AppBar(
        title: Text(useSG ? 'SG for ${widget.batch}' : 'Plato for ${widget.batch}'),
      ),
      body: Column(
        children: [
          // Input row for new measurement.
          Padding(
            padding: const EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: platoController,
                    decoration: InputDecoration(
                      hintText: useSG ? 'Enter SG' : 'Enter Plato',
                    ),
                    onSubmitted: (_) => _savePlato(),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _savePlato,
                  child: const Text('Save'),
                ),
              ],
            ),
          ),
          // Row for fermentation% input and predicted FG / estimated ALC%.
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: fermentationController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      hintText: 'Enter fermentation% (Example 80%)',
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      predictedFG != null
                          ? (useSG
                              ? 'Predicted SG: ${platoToSG(predictedFG!).toStringAsFixed(3)}'
                              : 'Predicted FG: ${predictedFG!.toStringAsFixed(2)}')
                          : 'Predicted FG: -',
                      style: const TextStyle(fontSize: 14),
                    ),
                    Text(
                      estimatedALC != null
                          ? 'Estimated ALC%: ${estimatedALC.toStringAsFixed(1)}%'
                          : 'Estimated ALC%: -',
                      style: const TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ],
            ),
          ),
          // Row for target measurement input and prediction button.
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: targetPlatoController,
                    keyboardType: TextInputType.number,
                    decoration: InputDecoration(
                      hintText: useSG
                          ? 'Enter target SG (Example 1.050)'
                          : 'Enter target Plato (Example 10)',
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _predictTargetTime,
                  child: const Text('Predict Target Time'),
                ),
              ],
            ),
          ),
          // Display prediction result.
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 3),
            child: Text(
              predictionResult,
              style: const TextStyle(fontSize: 14, color: Colors.amber),
            ),
          ),
          // List of recorded measurements.
          Expanded(
            child: platoList.isEmpty
                ? const Center(child: Text('Your batch list is empty. Create your first batch!'))
                : ListView.builder(
                    itemCount: platoList.length,
                    itemBuilder: (context, index) {
                      final item = platoList[index];
                      double storedValue = double.tryParse(item['value']) ?? 0;
                      String displayStr = useSG
                          ? 'SG: ${platoToSG(storedValue).toStringAsFixed(3)}'
                          : 'Plato: ${storedValue.toStringAsFixed(2)}';
                      return ListTile(
                        title: Text('$displayStr | ${item['date']}'),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            IconButton(
                                icon: const Icon(Icons.edit),
                                onPressed: () => _editPlato(index)),
                            IconButton(
                                icon: const Icon(Icons.delete),
                                onPressed: () => _confirmDeletePlato(index)),
                          ],
                        ),
                      );
                    },
                  ),
          ),
          // Chart area.
          Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: Container(
              height: 220,
              child: _buildLineChart(platoList),
            ),
          ),
        ],
      ),
    );
  }
}
