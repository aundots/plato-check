import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';

// 앱의 진입점
void main() {
  runApp(BatchApp());
}

// 앱의 루트 위젯
class BatchApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Batch Tracker',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: BatchListScreen(),
    );
  }
}

// 배치 목록 화면
class BatchListScreen extends StatefulWidget {
  @override
  _BatchListScreenState createState() => _BatchListScreenState();
}

class _BatchListScreenState extends State<BatchListScreen> {
  Map<String, dynamic> data = {};
  TextEditingController batchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  // 데이터 로드
  Future<void> _loadData() async {
    final file = await _getLocalFile();
    if (await file.exists()) {
      final content = await file.readAsString();
      setState(() {
        data = json.decode(content);
      });
    }
  }

  // 로컬 파일 경로 가져오기
  Future<File> _getLocalFile() async {
    final dir = await getApplicationDocumentsDirectory();
    return File('${dir.path}/data.json');
  }

  // 데이터 저장
  Future<void> _saveData() async {
    final file = await _getLocalFile();
    await file.writeAsString(json.encode(data));
  }

  // 새 배치 추가
  void _addBatch() {
    String batchNumber = batchController.text.trim();
    if (batchNumber.isNotEmpty && !data.containsKey(batchNumber)) {
      setState(() {
        data[batchNumber] = {
          'created': DateFormat('MM-dd HH:mm').format(DateTime.now()),
          'plato': []
        };
      });
      _saveData();
      batchController.clear();
    }
  }

  // 배치 삭제
  void _deleteBatch(String batch) {
    setState(() {
      data.remove(batch);
    });
    _saveData();
  }

  // 배치 이름 수정
  void _editBatch(String oldBatch) {
    TextEditingController editController =
    TextEditingController(text: oldBatch);
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Edit Batch'),
          content: TextField(
            controller: editController,
            decoration: InputDecoration(hintText: 'Enter new batch name'),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                String newBatch = editController.text.trim();
                if (newBatch.isNotEmpty &&
                    newBatch != oldBatch &&
                    !data.containsKey(newBatch)) {
                  setState(() {
                    var batchData = data[oldBatch];
                    data.remove(oldBatch);
                    data[newBatch] = batchData;
                  });
                  _saveData();
                }
                Navigator.pop(context);
              },
              child: Text('Save'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    // 최신 배치가 상단에 오도록 키 리스트를 역순으로 정렬
    List<String> batchList = data.keys.toList().reversed.toList();

    return Scaffold(
      appBar: AppBar(title: Text('Batch List')),
      body: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: batchController,
                    decoration: InputDecoration(hintText: 'Enter Batch Number'),
                  ),
                ),
                SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _addBatch,
                  child: Text('Add'),
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: batchList.length,
              itemBuilder: (context, index) {
                String batch = batchList[index];
                return ListTile(
                  title: Text('$batch | Created: ${data[batch]['created']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.edit),
                        onPressed: () => _editBatch(batch),
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () => _deleteBatch(batch),
                      ),
                    ],
                  ),
                  onTap: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => PlatoScreen(
                          batch: batch,
                          data: data,
                          saveData: _saveData,
                        ),
                      ),
                    );
                  },
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// Plato 관리 화면
class PlatoScreen extends StatefulWidget {
  final String batch;
  final Map<String, dynamic> data;
  final Function saveData;

  PlatoScreen(
      {required this.batch, required this.data, required this.saveData});

  @override
  _PlatoScreenState createState() => _PlatoScreenState();
}

class _PlatoScreenState extends State<PlatoScreen> {
  TextEditingController platoController = TextEditingController();

  // Plato 값 저장
  void _savePlato() {
    String platoValue = platoController.text.trim();
    if (platoValue.isNotEmpty) {
      setState(() {
        widget.data[widget.batch]['plato'].add({
          'value': platoValue,
          'timestamp': DateFormat('MM-dd HH:mm').format(DateTime.now())
        });
      });
      widget.saveData();
      platoController.clear();
    }
  }

  // Plato 값 삭제
  void _deletePlato(int index) {
    setState(() {
      widget.data[widget.batch]['plato'].removeAt(index);
    });
    widget.saveData();
  }

  // Plato 값 수정
  void _editPlato(int index) {
    var platoItem = widget.data[widget.batch]['plato'][index];
    TextEditingController editController =
    TextEditingController(text: platoItem['value']);
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text('Edit Plato'),
          content: TextField(
            controller: editController,
            decoration: InputDecoration(hintText: 'Enter new plato value'),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('Cancel'),
            ),
            TextButton(
              onPressed: () {
                String newValue = editController.text.trim();
                if (newValue.isNotEmpty) {
                  setState(() {
                    widget.data[widget.batch]['plato'][index]['value'] =
                        newValue;
                    widget.data[widget.batch]['plato'][index]['timestamp'] =
                        DateFormat('MM-dd HH:mm').format(DateTime.now());
                  });
                  widget.saveData();
                }
                Navigator.pop(context);
              },
              child: Text('Save'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    List<dynamic> platoList = widget.data[widget.batch]['plato'];
    return Scaffold(
      appBar: AppBar(title: Text('Plato for ${widget.batch}')),
      body: Column(
        children: [
          Padding(
            padding: EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: platoController,
                    decoration: InputDecoration(hintText: 'Enter Plato'),
                  ),
                ),
                SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _savePlato,
                  child: Text('Save'),
                ),
              ],
            ),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: platoList.length,
              itemBuilder: (context, index) {
                var item = platoList[index];
                return ListTile(
                  title: Text(
                      'Plato: ${item['value']} | ${item['timestamp']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(Icons.edit),
                        onPressed: () => _editPlato(index),
                      ),
                      IconButton(
                        icon: Icon(Icons.delete),
                        onPressed: () => _deletePlato(index),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
