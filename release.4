import 'dart:convert';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const BatchApp());
}

class BatchApp extends StatelessWidget {
  const BatchApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Batch Tracker',
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.blue,
      ),
      home: const BatchListScreen(),
    );
  }
}

class BatchListScreen extends StatefulWidget {
  const BatchListScreen({Key? key}) : super(key: key);

  @override
  _BatchListScreenState createState() => _BatchListScreenState();
}

class _BatchListScreenState extends State<BatchListScreen> {
  Map<String, dynamic> data = {};
  final TextEditingController batchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<File> get _localFile async {
    final dir = await getApplicationDocumentsDirectory();
    return File('${dir.path}/data.json');
  }

  Future<void> _loadData() async {
    try {
      final file = await _localFile;
      if (await file.exists()) {
        final content = await file.readAsString();
        setState(() => data = json.decode(content));
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error loading data: $e')),
      );
    }
  }

  Future<void> _saveData() async {
    try {
      final file = await _localFile;
      await file.writeAsString(json.encode(data));
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error saving data: $e')),
      );
    }
  }

  Future<void> _exportToCSV() async {
    final buffer = StringBuffer();
    buffer.writeln('Batch,Date,Plato Value,Date');

    for (var entry in data.entries) {
      final batch = entry.key;
      final date = entry.value['date'];
      final platos = entry.value['plato'] as List<dynamic>;
      if (platos.isEmpty) {
        buffer.writeln('$batch,$date,,');
      } else {
        for (var p in platos) {
          buffer.writeln('$batch,$date,${p['value']},${p['date']}');
        }
      }
    }

    final dir = await getTemporaryDirectory();
    final file = File('${dir.path}/batches.csv');
    await file.writeAsString(buffer.toString());

    Share.shareXFiles([XFile(file.path)], text: 'Batch Data Export');
  }

  void _addBatch() {
    final batch = batchController.text.trim();
    if (batch.isNotEmpty && !data.containsKey(batch)) {
      setState(() {
        data[batch] = {
          'date': DateFormat('MM-dd HH:mm').format(DateTime.now()),
          'plato': <Map<String, String>>[],
        };
      });
      _saveData();
      batchController.clear();
    }
  }

  void _confirmDeleteBatch(String batch) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: Text('Are you sure you want to delete the batch "$batch"?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              setState(() => data.remove(batch));
              _saveData();
            },
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }

  // 배치 수정 시 이름과 날짜를 함께 변경할 수 있도록 수정
  void _editBatch(String oldBatch) {
    final nameController = TextEditingController(text: oldBatch);
    DateTime selectedDate;
    try {
      selectedDate = DateFormat('MM-dd HH:mm').parse(data[oldBatch]['date']);
      // 연도가 없으므로 현재 연도로 보정
      selectedDate = DateTime(
        DateTime.now().year,
        selectedDate.month,
        selectedDate.day,
        selectedDate.hour,
        selectedDate.minute,
      );
    } catch (e) {
      selectedDate = DateTime.now();
    }

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setStateDialog) {
            return AlertDialog(
              title: const Text('Edit Batch'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  TextField(
                    controller: nameController,
                    decoration:
                    const InputDecoration(labelText: 'Batch Name'),
                  ),
                  const SizedBox(height: 10),
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                          'Date: ${DateFormat('MM-dd HH:mm').format(selectedDate)}',
                        ),
                      ),
                      IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        },
                      ),
                    ],
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel'),
                ),
                TextButton(
                  onPressed: () {
                    final newName = nameController.text.trim();
                    if (newName.isNotEmpty &&
                        (!data.containsKey(newName) || newName == oldBatch)) {
                      setState(() {
                        final temp = data[oldBatch];
                        data.remove(oldBatch);
                        temp['date'] =
                            DateFormat('MM-dd HH:mm').format(selectedDate);
                        data[newName] = temp;
                      });
                      _saveData();
                      Navigator.pop(context);
                    }
                  },
                  child: const Text('Save'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  void _sendFeedback() async {
    final Uri emailLaunchUri = Uri(
      scheme: 'mailto',
      path: 'ga72qah@gmail.com',
      query: Uri.encodeFull(
        'subject=Batch Tracker Feedback&body=Hello,\n\nI would like to share the following feedback:\n',
      ),
    );

    if (await canLaunchUrl(emailLaunchUri)) {
      await launchUrl(emailLaunchUri, mode: LaunchMode.externalApplication);
    } else {
      final Uri gmailUri = Uri.parse(
          'https://mail.google.com/mail/?view=cm&fs=1&to=ga72qah@gmail.com&su=Batch+Tracker+Feedback&body=Hello,%0A%0AI+would+like+to+share+the+following+feedback:%0A');
      if (await canLaunchUrl(gmailUri)) {
        await launchUrl(gmailUri, mode: LaunchMode.externalApplication);
      } else {
        final Uri outlookUri = Uri.parse(
            'https://outlook.live.com/owa/?path=/mail/action/compose&to=ga72qah@gmail.com&subject=Batch%20Tracker%20Feedback&body=Hello,');
        if (await canLaunchUrl(outlookUri)) {
          await launchUrl(outlookUri, mode: LaunchMode.externalApplication);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('No email client available')),
          );
        }
      }
    }
  }

  void _launchEinGlas() async {
    final url = Uri.parse('https://ein-glas.com');
    if (!await launchUrl(url, mode: LaunchMode.externalApplication)) {
      throw 'Could not launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    final batchList = data.keys.toList().reversed.toList();
    return Scaffold(
      appBar: AppBar(
        title: const Text('Batch List'),
        actions: [
          IconButton(
            icon: const Icon(Icons.share),
            onPressed: _exportToCSV,
          ),
        ],
      ),
      body: Stack(
        children: [
          Column(
            children: [
              Padding(
                padding: const EdgeInsets.all(10),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: batchController,
                        decoration: const InputDecoration(
                          hintText: 'Enter Batch Number',
                        ),
                        onSubmitted: (_) => _addBatch(),
                      ),
                    ),
                    const SizedBox(width: 10),
                    ElevatedButton(
                      onPressed: _addBatch,
                      child: const Text('Add'),
                    ),
                  ],
                ),
              ),
              Expanded(
                child: batchList.isEmpty
                    ? const Center(
                    child: Text(
                        'Your batch list is empty. Let us create your first batch!'))
                    : ListView.builder(
                  itemCount: batchList.length,
                  itemBuilder: (context, index) {
                    final batch = batchList[index];
                    final platoList =
                    data[batch]['plato'] as List<dynamic>;
                    final subtitle = platoList.isNotEmpty
                        ? 'Latest Plato: ${platoList.last['value']} at ${platoList.last['date']}'
                        : 'No Plato recorded';
                    return ListTile(
                      title: Text('$batch | ${data[batch]['date']}'),
                      subtitle: Text(subtitle),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                            icon: const Icon(Icons.edit),
                            onPressed: () => _editBatch(batch),
                          ),
                          IconButton(
                            icon: const Icon(Icons.delete),
                            onPressed: () => _confirmDeleteBatch(batch),
                          ),
                        ],
                      ),
                      onTap: () async {
                        await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => PlatoScreen(
                              batch: batch,
                              data: data,
                              saveData: _saveData,
                            ),
                          ),
                        );
                        setState(() {});
                      },
                    );
                  },
                ),
              ),
              const SizedBox(height: 60),
            ],
          ),
          Positioned(
            bottom: 10,
            left: 20,
            right: 20,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ElevatedButton.icon(
                      onPressed: _sendFeedback,
                      icon: const Icon(Icons.feedback),
                      label: const Text('Send Feedback'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blueAccent,
                      ),
                    ),
                    GestureDetector(
                      onTap: _launchEinGlas,
                      child: Image.asset(
                        'assets/logo.jpg',
                        height: 40,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                const Align(
                  alignment: Alignment.bottomRight,
                  child: Text(
                    'Created by Dipl.Brmst Taesoon',
                    style: TextStyle(
                      color: Colors.white70,
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class PlatoScreen extends StatefulWidget {
  final String batch;
  final Map<String, dynamic> data;
  final VoidCallback saveData;

  const PlatoScreen({
    Key? key,
    required this.batch,
    required this.data,
    required this.saveData,
  }) : super(key: key);

  @override
  _PlatoScreenState createState() => _PlatoScreenState();
}

class _PlatoScreenState extends State<PlatoScreen> {
  final TextEditingController platoController = TextEditingController();

  void _savePlato() {
    final value = platoController.text.trim();
    if (value.isNotEmpty) {
      setState(() {
        widget.data[widget.batch]['plato'].add({
          'value': value,
          'date': DateFormat('MM-dd HH:mm').format(DateTime.now()),
        });
      });
      widget.saveData();
      platoController.clear();
    }
  }

  void _confirmDeletePlato(int index) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: const Text('Are you sure you want to delete this Plato entry?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Cancel'),
          ),
          TextButton(
            onPressed: () {
              Navigator.pop(context);
              setState(() => widget.data[widget.batch]['plato'].removeAt(index));
              widget.saveData();
            },
            child: const Text('Delete'),
          ),
        ],
      ),
    );
  }

  // Plato 항목 수정 시 값과 날짜를 함께 수정하도록 변경
  void _editPlato(int index) {
    final valueController = TextEditingController(
      text: widget.data[widget.batch]['plato'][index]['value'],
    );
    DateTime selectedDate;
    try {
      selectedDate = DateFormat('MM-dd HH:mm')
          .parse(widget.data[widget.batch]['plato'][index]['date']);
      selectedDate = DateTime(
        DateTime.now().year,
        selectedDate.month,
        selectedDate.day,
        selectedDate.hour,
        selectedDate.minute,
      );
    } catch (e) {
      selectedDate = DateTime.now();
    }

    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setStateDialog) {
            return AlertDialog(
              title: const Text('Edit Plato'),
              content: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  TextField(
                    controller: valueController,
                    decoration:
                    const InputDecoration(labelText: 'Plato Value'),
                  ),
                  const SizedBox(height: 10),
                  Row(
                    children: [
                      Expanded(
                        child: Text(
                            'Date: ${DateFormat('MM-dd HH:mm').format(selectedDate)}'),
                      ),
                      IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        },
                      ),
                    ],
                  ),
                ],
              ),
              actions: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel'),
                ),
                TextButton(
                  onPressed: () {
                    String newPlato = valueController.text.trim();
                    if (newPlato.isNotEmpty) {
                      setState(() {
                        widget.data[widget.batch]['plato'][index]['value'] = newPlato;
                        widget.data[widget.batch]['plato'][index]['date'] =
                            DateFormat('MM-dd HH:mm').format(selectedDate);
                      });
                      widget.saveData();
                      Navigator.pop(context);
                    }
                  },
                  child: const Text('Save'),
                ),
              ],
            );
          },
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final platoList = widget.data[widget.batch]['plato'] as List<dynamic>;
    return Scaffold(
      appBar: AppBar(
        title: Text('Plato for ${widget.batch}'),
      ),
      body: Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: platoController,
                    decoration: const InputDecoration(
                      hintText: 'Enter Plato',
                    ),
                    onSubmitted: (_) => _savePlato(),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _savePlato,
                  child: const Text('Save'),
                ),
              ],
            ),
          ),
          Expanded(
            child: platoList.isEmpty
                ? const Center(child: Text('No plato values available'))
                : ListView.builder(
              itemCount: platoList.length,
              itemBuilder: (context, index) {
                final item = platoList[index];
                return ListTile(
                  title: Text('Plato: ${item['value']} | ${item['date']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: const Icon(Icons.edit),
                        onPressed: () => _editPlato(index),
                      ),
                      IconButton(
                        icon: const Icon(Icons.delete),
                        onPressed: () => _confirmDeletePlato(index),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}
