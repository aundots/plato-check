import 'dart:convert';
import 'dart:io';
import 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:fl_chart/fl_chart.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const BatchApp());
}

class BatchApp extends StatelessWidget {
  const BatchApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Batch Tracker',
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.blue,
      ),
      home: const BatchListScreen(),
    );
  }
}

/// BatchListScreen: 배치 추가, 삭제, 편집 및 CSV 내보내기 화면
/// AppBar 오른쪽 액션영역에 Plato/SG 토글 버튼이 CSV 공유 버튼 바로 왼쪽에 위치함.
class BatchListScreen extends StatefulWidget {
  const BatchListScreen({Key? key}) : super(key: key);

  @override
  _BatchListScreenState createState() => _BatchListScreenState();
}

class _BatchListScreenState extends State<BatchListScreen> {
  Map<String, dynamic> data = {};
  final TextEditingController batchController = TextEditingController();

  // BatchList 화면에서 Plato/SG 토글 상태 관리 (true: Plato, false: SG)
  bool showPlato = true;

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<File> get _localFile async {
    final dir = await getApplicationDocumentsDirectory();
    return File('${dir.path}/data.json');
  }

  Future<void> _loadData() async {
    try {
      final file = await _localFile;
      if (await file.exists()) {
        final content = await file.readAsString();
        setState(() => data = json.decode(content));
      }
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Error loading data: $e')));
    }
  }

  Future<void> _saveData() async {
    try {
      final file = await _localFile;
      await file.writeAsString(json.encode(data));
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Error saving data: $e')));
    }
  }

  Future<void> _exportToCSV() async {
    final buffer = StringBuffer();
    buffer.writeln('Batch,Date,Plato Value,Date');
    for (var entry in data.entries) {
      final batch = entry.key;
      final date = entry.value['date'];
      final platos = entry.value['plato'] as List<dynamic>;
      if (platos.isEmpty) {
        buffer.writeln('$batch,$date,,');
      } else {
        for (var p in platos) {
          buffer.writeln('$batch,$date,${p['value']},${p['date']}');
        }
      }
    }
    final dir = await getTemporaryDirectory();
    final file = File('${dir.path}/batches.csv');
    await file.writeAsString(buffer.toString());
    Share.shareXFiles([XFile(file.path)], text: 'Batch Data Export');
  }

  void _addBatch() {
    final batch = batchController.text.trim();
    if (batch.isNotEmpty && !data.containsKey(batch)) {
      setState(() {
        data[batch] = {
          'date': DateFormat('MM-dd HH:mm').format(DateTime.now()),
          'plato': <Map<String, String>>[],
        };
      });
      _saveData();
      batchController.clear();
    }
  }

  void _confirmDeleteBatch(String batch) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: Text('Are you sure you want to delete the batch "$batch"?'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          TextButton(
              onPressed: () {
                Navigator.pop(context);
                setState(() => data.remove(batch));
                _saveData();
              },
              child: const Text('Delete')),
        ],
      ),
    );
  }

  void _editBatch(String oldBatch) {
    final nameController = TextEditingController(text: oldBatch);
    DateTime selectedDate;
    try {
      selectedDate = DateFormat('MM-dd HH:mm').parse(data[oldBatch]['date']);
      selectedDate = DateTime(
          DateTime.now().year,
          selectedDate.month,
          selectedDate.day,
          selectedDate.hour,
          selectedDate.minute);
    } catch (e) {
      selectedDate = DateTime.now();
    }
    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(builder: (context, setStateDialog) {
          return AlertDialog(
            title: const Text('Edit Batch'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: const InputDecoration(labelText: 'Batch Name'),
                ),
                const SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: Text(
                          'Date: ${DateFormat('MM-dd HH:mm').format(selectedDate)}'),
                    ),
                    IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        }),
                  ],
                ),
              ],
            ),
            actions: [
              TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel')),
              TextButton(
                  onPressed: () {
                    final newName = nameController.text.trim();
                    if (newName.isNotEmpty &&
                        (!data.containsKey(newName) || newName == oldBatch)) {
                      setState(() {
                        final temp = data[oldBatch];
                        data.remove(oldBatch);
                        temp['date'] =
                            DateFormat('MM-dd HH:mm').format(selectedDate);
                        data[newName] = temp;
                      });
                      _saveData();
                      Navigator.pop(context);
                    }
                  },
                  child: const Text('Save')),
            ],
          );
        });
      },
    );
  }

  void _sendFeedback() async {
    final Uri emailLaunchUri = Uri(
      scheme: 'mailto',
      path: 'ga72qah@gmail.com',
      query: Uri.encodeFull(
          'subject=Batch Tracker Feedback&body=Hello,\n\nI would like to share the following feedback:\n'),
    );
    if (await canLaunchUrl(emailLaunchUri)) {
      await launchUrl(emailLaunchUri, mode: LaunchMode.externalApplication);
    } else {
      final Uri gmailUri = Uri.parse(
          'https://mail.google.com/mail/?view=cm&fs=1&to=ga72qah@gmail.com&su=Batch+Tracker+Feedback&body=Hello,%0A%0AI+would+like+to+share+the+following+feedback:%0A');
      if (await canLaunchUrl(gmailUri)) {
        await launchUrl(gmailUri, mode: LaunchMode.externalApplication);
      } else {
        final Uri outlookUri = Uri.parse(
            'https://outlook.live.com/owa/?path=/mail/action/compose&to=ga72qah@gmail.com&subject=Batch%20Tracker%20Feedback&body=Hello,');
        if (await canLaunchUrl(outlookUri)) {
          await launchUrl(outlookUri, mode: LaunchMode.externalApplication);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('No email client available')));
        }
      }
    }
  }

  void _launchEinGlas() async {
    final url = Uri.parse('https://ein-glas.com');
    if (!await launchUrl(url, mode: LaunchMode.externalApplication)) {
      throw 'Could not launch $url';
    }
  }

  // Plato를 SG로 변환 (Balling 공식 참고)
  double platoToSG(double plato) {
    return 1 + (plato / (258.6 - ((plato / 258.2) * 227.1)));
  }

  @override
  Widget build(BuildContext context) {
    final batchList = data.keys.toList().reversed.toList();
    return Scaffold(
      appBar: AppBar(
        title: const Text('Batch List'),
        actions: [
          // Plato/SG 토글 버튼을 CSV 공유 버튼 바로 왼쪽에 배치함.
          ToggleButtons(
            borderRadius: BorderRadius.circular(8),
            children: const [
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 8),
                child: Text("Plato"),
              ),
              Padding(
                padding: EdgeInsets.symmetric(horizontal: 8),
                child: Text("SG"),
              ),
            ],
            isSelected: [showPlato, !showPlato],
            onPressed: (index) {
              setState(() {
                showPlato = (index == 0);
              });
            },
          ),
          IconButton(
              icon: const Icon(Icons.share), onPressed: _exportToCSV),
        ],
      ),
      body: Stack(
        children: [
          Column(
            children: [
              // 배치 추가 입력 필드와 버튼
              Padding(
                padding: const EdgeInsets.all(10),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: batchController,
                        decoration: const InputDecoration(
                          hintText: 'Enter Batch Number',
                        ),
                        onSubmitted: (_) => _addBatch(),
                      ),
                    ),
                    const SizedBox(width: 10),
                    ElevatedButton(
                        onPressed: _addBatch, child: const Text('Add')),
                  ],
                ),
              ),
              // 배치 목록 ListView
              Expanded(
                child: batchList.isEmpty
                    ? const Center(
                    child: Text(
                        'Your batch list is empty. Create your first batch!'))
                    : ListView.builder(
                  itemCount: batchList.length,
                  itemBuilder: (context, index) {
                    final batch = batchList[index];
                    final platoList =
                    data[batch]['plato'] as List<dynamic>;
                    String subtitle;
                    if (platoList.isNotEmpty) {
                      final latest = platoList.last;
                      if (showPlato) {
                        subtitle =
                        'Latest Plato: ${latest['value']} at ${latest['date']}';
                      } else {
                        double platoVal = double.tryParse(latest['value']) ?? 0;
                        double sg = platoToSG(platoVal);
                        subtitle =
                        'Latest SG: ${sg.toStringAsFixed(3)} at ${latest['date']}';
                      }
                    } else {
                      subtitle = 'No Plato recorded';
                    }
                    return ListTile(
                      title: Text('$batch | ${data[batch]['date']}'),
                      subtitle: Text(subtitle),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                              icon: const Icon(Icons.edit),
                              onPressed: () => _editBatch(batch)),
                          IconButton(
                              icon: const Icon(Icons.delete),
                              onPressed: () =>
                                  _confirmDeleteBatch(batch)),
                        ],
                      ),
                      onTap: () async {
                        await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => PlatoScreen(
                              batch: batch,
                              data: data,
                              saveData: _saveData,
                              showPlato: showPlato,
                            ),
                          ),
                        );
                        setState(() {});
                      },
                    );
                  },
                ),
              ),
              const SizedBox(height: 60),
            ],
          ),
          // 하단 영역: Feedback 버튼, 로고, 제작자 정보
          Positioned(
            bottom: 10,
            left: 20,
            right: 20,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ElevatedButton.icon(
                      onPressed: _sendFeedback,
                      icon: const Icon(Icons.feedback),
                      label: const Text('Feedback'),
                      style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blueAccent),
                    ),
                    GestureDetector(
                      onTap: _launchEinGlas,
                      child: Image.asset(
                        'assets/logo.jpg',
                        height: 40,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                const Align(
                  alignment: Alignment.bottomRight,
                  child: Text(
                    'Created by Dipl.Brmst Taesoon',
                    style: TextStyle(color: Colors.white70, fontSize: 12),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

/// PlatoScreen: Plato(또는 SG) 입력/관리, 예측 및 차트 표시 화면
/// "fermentation%" 대신 "Attenuation %"라는 변수명과 힌트 텍스트를 사용하며,
/// 토글 상태(showPlato)에 따라 입력 필드의 예시문이 동적으로 변경됨.
class PlatoScreen extends StatefulWidget {
  final String batch;
  final Map<String, dynamic> data;
  final VoidCallback saveData;
  final bool showPlato; // BatchList에서 전달받은 토글 상태

  const PlatoScreen({
    Key? key,
    required this.batch,
    required this.data,
    required this.saveData,
    required this.showPlato,
  }) : super(key: key);

  @override
  _PlatoScreenState createState() => _PlatoScreenState();
}

class _PlatoScreenState extends State<PlatoScreen> {
  final TextEditingController platoController = TextEditingController();
  final TextEditingController attenuationController = TextEditingController();
  final TextEditingController targetPlatoController = TextEditingController();

  double? predictedFG; // 예측 최종 FG (Plato 단위)
  String predictionResult = "";

  @override
  void initState() {
    super.initState();
    attenuationController.addListener(_calculatePredictedFG);
  }

  @override
  void dispose() {
    platoController.dispose();
    attenuationController.dispose();
    targetPlatoController.dispose();
    super.dispose();
  }

  /// Balling 공식: Plato를 SG로 변환 (대략적 계산)
  double platoToSG(double plato) {
    return 1 + (plato / (258.6 - ((plato / 258.2) * 227.1)));
  }

  /// ABV 계산: (OG - SG) * 131.25
  double calculateABV(double currentPlato, double initialPlato) {
    final og = platoToSG(initialPlato);
    final sg = platoToSG(currentPlato);
    return (og - sg) * 131.25;
  }

  /// Attenuation % 입력에 따른 예측 FG 재계산 (Plato 단위)
  void _calculatePredictedFG() {
    final platoEntries = widget.data[widget.batch]['plato'];
    if (platoEntries.isNotEmpty && attenuationController.text.isNotEmpty) {
      final initialPlato =
      double.tryParse(widget.data[widget.batch]['plato'][0]['value']);
      final attenuationPercent = double.tryParse(attenuationController.text);
      if (initialPlato != null && attenuationPercent != null) {
        setState(() {
          predictedFG = initialPlato * (1 - attenuationPercent / 100);
        });
      }
    } else {
      setState(() {
        predictedFG = null;
      });
    }
  }

  Map<String, double>? _fitExponentialDecayModel() {
    List<dynamic> list = widget.data[widget.batch]['plato'];
    if (list.length < 2) return null;

    List<double> t = [];
    List<double> y = [];
    DateFormat format = DateFormat('MM-dd HH:mm');
    DateTime baseTime;

    try {
      baseTime = format.parse(list[0]['date']);
      baseTime = DateTime(
          baseTime.year, baseTime.month, baseTime.day, baseTime.hour, baseTime.minute);
    } catch (e) {
      return null;
    }

    for (var entry in list) {
      try {
        DateTime dt = format.parse(entry['date']);
        dt = DateTime(dt.year, dt.month, dt.day, dt.hour, dt.minute);
        t.add(dt.difference(baseTime).inMinutes.toDouble());
        y.add(double.tryParse(entry['value']) ?? 0);
      } catch (_) {}
    }

    if (t.length < 2) return null;

    double X0 = y.first;
    double Xinf = 0; // Xinf를 0으로 고정 (도메인 지식에 따라 조정 가능)
    if (X0 == Xinf) return null;

    List<double> lnTerms = [];
    List<double> filteredT = [];

    for (int i = 0; i < t.length; i++) {
      double numerator = y[i] - Xinf;
      double denominator = X0 - Xinf;
      if (numerator > 0 && denominator > 0) {
        lnTerms.add(math.log(numerator / denominator));
        filteredT.add(t[i]);
      }
    }

    if (lnTerms.isEmpty) return null;

    double k;
    if (lnTerms.length == 1) {
      k = 0.01; // 기본값 설정
    } else {
      double sumT = filteredT.reduce((a, b) => a + b);
      double sumLn = lnTerms.reduce((a, b) => a + b);
      double sumT2 = filteredT.map((ti) => ti * ti).reduce((a, b) => a + b);
      double sumTLn = 0;
      for (int i = 0; i < filteredT.length; i++) {
        sumTLn += filteredT[i] * lnTerms[i];
      }
      int n = filteredT.length;
      double denominator = n * sumT2 - sumT * sumT;
      if (denominator == 0) return null;
      k = -(n * sumTLn - sumT * sumLn) / denominator;
    }

    return {
      "X0": X0,
      "Xinf": Xinf,
      "k": k,
      "baseTime": baseTime.millisecondsSinceEpoch.toDouble(),
    };
  }

  void _predictTargetTime() {
    final params = _fitExponentialDecayModel();
    if (params == null) {
      setState(() {
        predictionResult = "Prediction unavailable due to insufficient or inconsistent data.";
      });
      return;
    }

    double X0 = params["X0"]!;
    double Xinf = params["Xinf"]!;
    double k = params["k"]!;
    double baseTimeEpoch = params["baseTime"]!;
    double? target = double.tryParse(targetPlatoController.text);

    // 입력값 검증
    if (target == null || target <= 0) {
      setState(() {
        predictionResult = "Target value must be a positive number.";
      });
      return;
    }

    // 데이터 추세 검증
    if (X0 <= Xinf) {
      setState(() {
        predictionResult = "Data does not show a decreasing trend, exponential decay model is not applicable.";
      });
      return;
    }

    // 감쇠 상수 검증
    if (k <= 0) {
      setState(() {
        predictionResult = "Invalid decay rate, unable to predict.";
      });
      return;
    }

    // 타겟 값 범위 검증
    if (target >= X0) {
      setState(() {
        predictionResult = "Target value ($target) cannot be greater than or equal to the initial Plato value ($X0).";
      });
      return;
    }

    final ratio = (target - Xinf) / (X0 - Xinf);

    if (ratio <= 0 || ratio.isNaN || ratio.isInfinite) {
      setState(() {
        predictionResult = "Target value ($target) is below the expected final value ($Xinf). Prediction may be inaccurate.";
      });
    }

    double t = -1 / k * math.log(ratio);

    DateTime baseTime = DateTime.fromMillisecondsSinceEpoch(baseTimeEpoch.toInt());
    DateTime predictedTime = baseTime.add(Duration(minutes: t.round()));

    setState(() {
      predictionResult = "Estimated target reached at: ${DateFormat('MM-dd HH:mm').format(predictedTime)}";
    });
  }

  /// Plato(또는 SG) 값을 입력하여 데이터에 추가함.
  /// 입력 필드의 힌트 텍스트는 토글 상태(widget.showPlato)에 따라 동적으로 표시됨.
  void _savePlato() {
    final value = platoController.text.trim();
    if (value.isNotEmpty) {
      setState(() {
        widget.data[widget.batch]['plato'].add({
          'value': value,
          'date': DateFormat('MM-dd HH:mm').format(DateTime.now()),
        });
      });
      widget.saveData();
      platoController.clear();
      _calculatePredictedFG();
    }
  }

  void _confirmDeletePlato(int index) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: const Text('Are you sure you want to delete this Plato entry?'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          TextButton(
              onPressed: () {
                Navigator.pop(context);
                setState(() => widget.data[widget.batch]['plato'].removeAt(index));
                widget.saveData();
                _calculatePredictedFG();
              },
              child: const Text('Delete')),
        ],
      ),
    );
  }

  void _editPlato(int index) {
    final valueController = TextEditingController(
      text: widget.data[widget.batch]['plato'][index]['value'],
    );
    DateTime selectedDate;
    try {
      selectedDate = DateFormat('MM-dd HH:mm')
          .parse(widget.data[widget.batch]['plato'][index]['date']);
      selectedDate = DateTime(
        DateTime.now().year,
        selectedDate.month,
        selectedDate.day,
        selectedDate.hour,
        selectedDate.minute,
      );
    } catch (e) {
      selectedDate = DateTime.now();
    }
    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(builder: (context, setStateDialog) {
          return AlertDialog(
            title: const Text('Edit Plato'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: valueController,
                  decoration: const InputDecoration(labelText: 'Plato Value'),
                ),
                const SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: Text(
                          'Date: ${DateFormat('MM-dd HH:mm').format(selectedDate)}'),
                    ),
                    IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        }),
                  ],
                ),
              ],
            ),
            actions: [
              TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel')),
              TextButton(
                  onPressed: () {
                    final newPlato = valueController.text.trim();
                    if (newPlato.isNotEmpty) {
                      setState(() {
                        widget.data[widget.batch]['plato'][index]['value'] =
                            newPlato;
                        widget.data[widget.batch]['plato'][index]['date'] =
                            DateFormat('MM-dd HH:mm').format(selectedDate);
                      });
                      widget.saveData();
                      Navigator.pop(context);
                      _calculatePredictedFG();
                    }
                  },
                  child: const Text('Save')),
            ],
          );
        });
      },
    );
  }

  /// 차트 위젯: 입력된 Plato(또는 SG) 값을 기반으로 선 그래프를 생성함.
  /// 좌측 Y축은 토글 상태(widget.showPlato)에 따라 Plato 또는 SG, 우측 축은 계산된 ALC%를 표시함.
  Widget _buildLineChart(List<dynamic> platoList) {
    if (platoList.isEmpty) {
      return const Center(
        child: Text('No plato values available to display chart'),
      );
    }
    final List<FlSpot> spots = [];
    final Map<double, String> dateLabels = {};
    for (int i = 0; i < platoList.length; i++) {
      final point = platoList[i];
      final rawPlato = double.tryParse(point['value']) ?? 0;
      final displayValue = widget.showPlato ? rawPlato : platoToSG(rawPlato);
      spots.add(FlSpot(i.toDouble(), displayValue));
      dateLabels[i.toDouble()] = point['date'];
    }
    double minY = spots.map((s) => s.y).reduce(math.min);
    double maxY = spots.map((s) => s.y).reduce(math.max);
    if (minY == maxY) {
      minY -= 1;
      maxY += 1;
    }
    double? initialPlato = widget.data[widget.batch]['plato'].isNotEmpty
        ? double.tryParse(widget.data[widget.batch]['plato'][0]['value'])
        : null;
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: LineChart(
        LineChartData(
          clipData: FlClipData.all(),
          minY: minY,
          maxY: maxY,
          gridData: FlGridData(show: true),
          borderData: FlBorderData(show: true),
          lineBarsData: [
            LineChartBarData(
              spots: spots,
              isCurved: true,
              barWidth: 3,
              dotData: FlDotData(show: true),
            ),
          ],
          titlesData: FlTitlesData(
            bottomTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 40,
                interval: 1,
                getTitlesWidget: (double value, TitleMeta meta) {
                  final label = dateLabels[value];
                  if (label == null) {
                    return SideTitleWidget(meta: meta, child: const Text(''));
                  }
                  final parts = label.split(' ');
                  final datePart = parts.isNotEmpty ? parts[0] : '';
                  final timePart = parts.length > 1 ? parts[1] : '';
                  return SideTitleWidget(
                    meta: meta,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(datePart, style: const TextStyle(fontSize: 10)),
                        Text(timePart, style: const TextStyle(fontSize: 10)),
                      ],
                    ),
                  );
                },
              ),
            ),
            leftTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 45,
                interval: (maxY - minY) / 5,
                getTitlesWidget: (double value, TitleMeta meta) {
                  return SideTitleWidget(
                    meta: meta,
                    child: Text(
                      value.toStringAsFixed(widget.showPlato ? 0 : 3),
                      style: const TextStyle(fontSize: 10),
                    ),
                  );
                },
              ),
              axisNameWidget: const Text("Plato"),
              axisNameSize: 30,
            ),
            topTitles: AxisTitles(
              sideTitles: SideTitles(showTitles: false),
            ),
            rightTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 45,
                interval: (maxY - minY) / 5,
                getTitlesWidget: (double value, TitleMeta meta) {
                  if (initialPlato == null) {
                    return SideTitleWidget(meta: meta, child: const Text(''));
                  }
                  double abv;
                  if (widget.showPlato) {
                    abv = calculateABV(value, initialPlato);
                  } else {
                    abv = (platoToSG(initialPlato) - value) * 131.25;
                  }
                  return SideTitleWidget(
                    meta: meta,
                    child: Text('${abv.toStringAsFixed(1)}%', style: const TextStyle(fontSize: 10)),
                  );
                },
              ),
              axisNameWidget: const Text("ALC%"),
              axisNameSize: 30,
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final platoList = widget.data[widget.batch]['plato'] as List<dynamic>;
    final estimatedALC =
    (predictedFG != null && widget.data[widget.batch]['plato'].isNotEmpty)
        ? calculateABV(predictedFG!,
        double.tryParse(widget.data[widget.batch]['plato'][0]['value']) ?? 0)
        : null;
    return Scaffold(
      appBar: AppBar(
        title: Text('Plato for ${widget.batch}'),
      ),
      body: Column(
        children: [
          // 입력 Row: Plato(또는 SG) 값 입력 필드와 Save 버튼
          Padding(
            padding: const EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: platoController,
                    decoration: InputDecoration(
                      hintText: widget.showPlato ? 'Enter Plato' : 'Enter SG',
                    ),
                    keyboardType: TextInputType.number,
                    onSubmitted: (_) => _savePlato(),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _savePlato,
                  child: const Text('Save'),
                ),
              ],
            ),
          ),
          // Attenuation % 입력과 예측 FG/Estimated ALC% 표시 Row
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: attenuationController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      hintText: 'Enter Attenuation % (Example 80%)',
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      predictedFG != null
                          ? (widget.showPlato
                          ? 'Predicted FG (Plato): ${predictedFG!.toStringAsFixed(2)}'
                          : 'Predicted FG (SG): ${platoToSG(predictedFG!).toStringAsFixed(3)}')
                          : 'Predicted FG: -',
                      style: const TextStyle(fontSize: 14),
                    ),
                    Text(
                      estimatedALC != null
                          ? 'Estimated ALC%: ${estimatedALC.toStringAsFixed(1)}%'
                          : 'Estimated ALC%: -',
                      style: const TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ],
            ),
          ),
          // 목표 값 입력 및 예측 버튼 Row
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: targetPlatoController,
                    keyboardType: TextInputType.number,
                    decoration: InputDecoration(
                      hintText: widget.showPlato
                          ? 'Enter target Plato (Example 10)'
                          : 'Enter target SG (Example 1.050)',
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _predictTargetTime,
                  child: const Text('Predict Target Time'),
                ),
              ],
            ),
          ),
          // 예측 결과 출력 영역
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 3),
            child: Text(
              predictionResult,
              style: const TextStyle(fontSize: 14, color: Colors.amber),
            ),
          ),
          // Plato 항목 목록
          Expanded(
            child: platoList.isEmpty
                ? const Center(child: Text('No Plato entries.'))
                : ListView.builder(
              itemCount: platoList.length,
              itemBuilder: (context, index) {
                final item = platoList[index];
                return ListTile(
                  title: Text('Plato: ${item['value']} | ${item['date']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                          icon: const Icon(Icons.edit),
                          onPressed: () => _editPlato(index)),
                      IconButton(
                          icon: const Icon(Icons.delete),
                          onPressed: () => _confirmDeletePlato(index)),
                    ],
                  ),
                );
              },
            ),
          ),
          // 차트 영역
          Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: Container(
              height: 220,
              child: _buildLineChart(platoList),
            ),
          ),
        ],
      ),
    );
  }
}
