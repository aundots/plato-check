import 'dart:convert';
import 'dart:io';
import 'dart:math' as math;

import 'package:flutter/material.dart';
import 'package:path_provider/path_provider.dart';
import 'package:intl/intl.dart';
import 'package:share_plus/share_plus.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:fl_chart/fl_chart.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(const BatchApp());
}

class BatchApp extends StatelessWidget {
  const BatchApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Batch Tracker',
      theme: ThemeData(
        brightness: Brightness.dark,
        primarySwatch: Colors.blue,
      ),
      home: const BatchListScreen(),
    );
  }
}

class BatchListScreen extends StatefulWidget {
  const BatchListScreen({Key? key}) : super(key: key);

  @override
  _BatchListScreenState createState() => _BatchListScreenState();
}

class _BatchListScreenState extends State<BatchListScreen> {
  Map<String, dynamic> data = {};
  final TextEditingController batchController = TextEditingController();

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<File> get _localFile async {
    final dir = await getApplicationDocumentsDirectory();
    return File('${dir.path}/data.json');
  }

  Future<void> _loadData() async {
    try {
      final file = await _localFile;
      if (await file.exists()) {
        final content = await file.readAsString();
        setState(() => data = json.decode(content));
      }
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Error loading data: $e')));
    }
  }

  Future<void> _saveData() async {
    try {
      final file = await _localFile;
      await file.writeAsString(json.encode(data));
    } catch (e) {
      ScaffoldMessenger.of(context)
          .showSnackBar(SnackBar(content: Text('Error saving data: $e')));
    }
  }

  Future<void> _exportToCSV() async {
    final buffer = StringBuffer();
    buffer.writeln('Batch,Date,Plato Value,Date');
    for (var entry in data.entries) {
      final batch = entry.key;
      final date = entry.value['date'];
      final platos = entry.value['plato'] as List<dynamic>;
      if (platos.isEmpty) {
        buffer.writeln('$batch,$date,,');
      } else {
        for (var p in platos) {
          buffer.writeln('$batch,$date,${p['value']},${p['date']}');
        }
      }
    }
    final dir = await getTemporaryDirectory();
    final file = File('${dir.path}/batches.csv');
    await file.writeAsString(buffer.toString());
    Share.shareXFiles([XFile(file.path)], text: 'Batch Data Export');
  }

  void _addBatch() {
    final batch = batchController.text.trim();
    if (batch.isNotEmpty && !data.containsKey(batch)) {
      setState(() {
        data[batch] = {
          'date': DateFormat('MM-dd HH:mm').format(DateTime.now()),
          'plato': <Map<String, String>>[],
        };
      });
      _saveData();
      batchController.clear();
    }
  }

  void _confirmDeleteBatch(String batch) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content: Text('Are you sure you want to delete the batch "$batch"?'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          TextButton(
              onPressed: () {
                Navigator.pop(context);
                setState(() => data.remove(batch));
                _saveData();
              },
              child: const Text('Delete')),
        ],
      ),
    );
  }

  void _editBatch(String oldBatch) {
    final nameController = TextEditingController(text: oldBatch);
    DateTime selectedDate;
    try {
      selectedDate = DateFormat('MM-dd HH:mm').parse(data[oldBatch]['date']);
      selectedDate = DateTime(
          DateTime.now().year,
          selectedDate.month,
          selectedDate.day,
          selectedDate.hour,
          selectedDate.minute);
    } catch (e) {
      selectedDate = DateTime.now();
    }
    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(builder: (context, setStateDialog) {
          return AlertDialog(
            title: const Text('Edit Batch'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: const InputDecoration(labelText: 'Batch Name'),
                ),
                const SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: Text(
                          'Date: ${DateFormat('MM-dd HH:mm').format(selectedDate)}'),
                    ),
                    IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime: TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        }),
                  ],
                ),
              ],
            ),
            actions: [
              TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel')),
              TextButton(
                  onPressed: () {
                    final newName = nameController.text.trim();
                    if (newName.isNotEmpty &&
                        (!data.containsKey(newName) || newName == oldBatch)) {
                      setState(() {
                        final temp = data[oldBatch];
                        data.remove(oldBatch);
                        temp['date'] =
                            DateFormat('MM-dd HH:mm').format(selectedDate);
                        data[newName] = temp;
                      });
                      _saveData();
                      Navigator.pop(context);
                    }
                  },
                  child: const Text('Save')),
            ],
          );
        });
      },
    );
  }

  void _sendFeedback() async {
    final Uri emailLaunchUri = Uri(
      scheme: 'mailto',
      path: 'ga72qah@gmail.com',
      query: Uri.encodeFull(
          'subject=Batch Tracker Feedback&body=Hello,\n\nI would like to share the following feedback:\n'),
    );
    if (await canLaunchUrl(emailLaunchUri)) {
      await launchUrl(emailLaunchUri, mode: LaunchMode.externalApplication);
    } else {
      final Uri gmailUri = Uri.parse(
          'https://mail.google.com/mail/?view=cm&fs=1&to=ga72qah@gmail.com&su=Batch+Tracker+Feedback&body=Hello,%0A%0AI+would+like+to+share+the+following+feedback:%0A');
      if (await canLaunchUrl(gmailUri)) {
        await launchUrl(gmailUri, mode: LaunchMode.externalApplication);
      } else {
        final Uri outlookUri = Uri.parse(
            'https://outlook.live.com/owa/?path=/mail/action/compose&to=ga72qah@gmail.com&subject=Batch%20Tracker%20Feedback&body=Hello,');
        if (await canLaunchUrl(outlookUri)) {
          await launchUrl(outlookUri, mode: LaunchMode.externalApplication);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('No email client available')));
        }
      }
    }
  }

  void _launchEinGlas() async {
    final url = Uri.parse('https://ein-glas.com');
    if (!await launchUrl(url, mode: LaunchMode.externalApplication)) {
      throw 'Could not launch $url';
    }
  }

  @override
  Widget build(BuildContext context) {
    final batchList = data.keys.toList().reversed.toList();
    return Scaffold(
      appBar: AppBar(
        title: const Text('Batch List'),
        actions: [
          IconButton(
              icon: const Icon(Icons.share), onPressed: _exportToCSV),
        ],
      ),
      body: Stack(
        children: [
          Column(
            children: [
              Padding(
                padding: const EdgeInsets.all(10),
                child: Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: batchController,
                        decoration: const InputDecoration(
                          hintText: 'Enter Batch Number',
                        ),
                        onSubmitted: (_) => _addBatch(),
                      ),
                    ),
                    const SizedBox(width: 10),
                    ElevatedButton(
                        onPressed: _addBatch, child: const Text('Add')),
                  ],
                ),
              ),
              Expanded(
                child: batchList.isEmpty
                    ? const Center(
                    child: Text(
                        'Your batch list is empty. Create your first batch!'))
                    : ListView.builder(
                  itemCount: batchList.length,
                  itemBuilder: (context, index) {
                    final batch = batchList[index];
                    final platoList =
                    data[batch]['plato'] as List<dynamic>;
                    final subtitle = platoList.isNotEmpty
                        ? 'Latest Plato: ${platoList.last['value']} at ${platoList.last['date']}'
                        : 'No Plato recorded';
                    return ListTile(
                      title: Text('$batch | ${data[batch]['date']}'),
                      subtitle: Text(subtitle),
                      trailing: Row(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          IconButton(
                              icon: const Icon(Icons.edit),
                              onPressed: () => _editBatch(batch)),
                          IconButton(
                              icon: const Icon(Icons.delete),
                              onPressed: () =>
                                  _confirmDeleteBatch(batch)),
                        ],
                      ),
                      onTap: () async {
                        await Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => PlatoScreen(
                              batch: batch,
                              data: data,
                              saveData: _saveData,
                            ),
                          ),
                        );
                        setState(() {});
                      },
                    );
                  },
                ),
              ),
              const SizedBox(height: 60),
            ],
          ),
          Positioned(
            bottom: 10,
            left: 20,
            right: 20,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.end,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    ElevatedButton.icon(
                      onPressed: _sendFeedback,
                      icon: const Icon(Icons.feedback),
                      label: const Text('Send Feedback'),
                      style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blueAccent),
                    ),
                    GestureDetector(
                      onTap: _launchEinGlas,
                      child: Image.asset(
                        'assets/logo.jpg',
                        height: 40,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                const Align(
                  alignment: Alignment.bottomRight,
                  child: Text(
                    'Created by Dipl.Brmst Taesoon',
                    style: TextStyle(color: Colors.white70, fontSize: 12),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class PlatoScreen extends StatefulWidget {
  final String batch;
  final Map<String, dynamic> data;
  final VoidCallback saveData;

  const PlatoScreen({
    Key? key,
    required this.batch,
    required this.data,
    required this.saveData,
  }) : super(key: key);

  @override
  _PlatoScreenState createState() => _PlatoScreenState();
}

class _PlatoScreenState extends State<PlatoScreen> {
  final TextEditingController platoController = TextEditingController();
  final TextEditingController fermentationController = TextEditingController();
  // 목표 Plato 예측용 컨트롤러
  final TextEditingController targetPlatoController = TextEditingController();
  double? predictedFG; // 예측 최종 FG (Plato 단위)
  String predictionResult = "";

  @override
  void initState() {
    super.initState();
    fermentationController.addListener(_calculatePredictedFG);
  }

  void _calculatePredictedFG() {
    if (widget.data[widget.batch]['plato'].isNotEmpty &&
        fermentationController.text.isNotEmpty) {
      final initialPlato =
      double.tryParse(widget.data[widget.batch]['plato'][0]['value']);
      final fermentationPercent = double.tryParse(fermentationController.text);
      if (initialPlato != null && fermentationPercent != null) {
        setState(() {
          predictedFG = initialPlato * (1 - fermentationPercent / 100);
        });
      }
    } else {
      setState(() {
        predictedFG = null;
      });
    }
  }

  // 로지스틱 회귀 모델을 통해 목표 Plato 도달 시각을 예측하는 함수
  // 모델: f(x) = L/(1+exp(-k*(x-t0)))
  // x는 첫 번째 측정치 기준으로 경과한 분을 의미합니다.
  Map<String, double>? _fitLogisticRegression() {
    List<dynamic> list = widget.data[widget.batch]['plato'];
    if (list.length < 2) return null;
    List<double> x = [];
    List<double> y = [];
    DateFormat format = DateFormat('MM-dd HH:mm');
    DateTime baseTime;
    try {
      baseTime = format.parse(list[0]['date']);
      baseTime = DateTime(baseTime.year, baseTime.month, baseTime.day,
          baseTime.hour, baseTime.minute);
    } catch (e) {
      return null;
    }
    for (var p in list) {
      try {
        DateTime dt = format.parse(p['date']);
        dt = DateTime(dt.year, dt.month, dt.day, dt.hour, dt.minute);
        x.add(dt.difference(baseTime).inMinutes.toDouble());
        y.add(double.tryParse(p['value']) ?? 0);
      } catch (e) {
        // invalid entry 무시
      }
    }
    if (x.length < 2) return null;
    // 초기 추정: L는 첫 Plato, k는 -0.01, t0는 중앙값
    double L = y.first;
    double k = -0.01;
    double t0Param = x[x.length ~/ 2];
    double lr = 1e-6;
    int iterations = 10000;
    for (int iter = 0; iter < iterations; iter++) {
      double dL = 0, dk = 0, dt0 = 0;
      for (int i = 0; i < x.length; i++) {
        double xi = x[i];
        double yi = y[i];
        double expTerm = math.exp(-k * (xi - t0Param));
        double pred = L / (1 + expTerm);
        double error = pred - yi;
        double sigma = 1 / (1 + expTerm);
        double dPred_dL = sigma;
        double dPred_dk =
            L * (xi - t0Param) * expTerm / math.pow(1 + expTerm, 2);
        double dPred_dt0 =
            -L * k * expTerm / math.pow(1 + expTerm, 2);
        dL += 2 * error * dPred_dL;
        dk += 2 * error * dPred_dk;
        dt0 += 2 * error * dPred_dt0;
      }
      L -= lr * dL;
      k -= lr * dk;
      t0Param -= lr * dt0;
    }
    return {
      "L": L,
      "k": k,
      "t0": t0Param,
      "baseTime": baseTime.millisecondsSinceEpoch.toDouble()
    };
  }

  // 로지스틱 모델을 이용해 목표 Plato에 도달하는 예측 시각을 계산
  // xTarget = t0 - (1/k)*ln(L/target - 1)
  void _predictTargetTime() {
    Map<String, double>? params = _fitLogisticRegression();
    if (params == null) {
      setState(() {
        predictionResult = "Not enough data for logistic prediction.";
      });
      return;
    }
    double L = params["L"]!;
    double k = params["k"]!;
    double t0Param = params["t0"]!;
    double baseTimeEpoch = params["baseTime"]!;
    double? target = double.tryParse(targetPlatoController.text);
    if (target == null) {
      setState(() {
        predictionResult = "Invalid target value.";
      });
      return;
    }
    double ratio = (L / target) - 1;
    if (ratio <= 0 || k == 0) {
      setState(() {
        predictionResult = "Target value out of range.";
      });
      return;
    }
    double xTarget = t0Param - (1 / k) * math.log(ratio);
    if (xTarget < 0) {
      setState(() {
        predictionResult = "Target already reached based on trend.";
      });
      return;
    }
    DateTime predictedTime =
    DateTime.fromMillisecondsSinceEpoch(baseTimeEpoch.toInt())
        .add(Duration(minutes: xTarget.round()));
    setState(() {
      predictionResult =
      "Estimated target reached at: ${DateFormat('MM-dd HH:mm').format(predictedTime)}";
    });
  }

  void _savePlato() {
    final value = platoController.text.trim();
    if (value.isNotEmpty) {
      setState(() {
        widget.data[widget.batch]['plato'].add({
          'value': value,
          'date': DateFormat('MM-dd HH:mm').format(DateTime.now()),
        });
      });
      widget.saveData();
      platoController.clear();
      _calculatePredictedFG();
    }
  }

  void _confirmDeletePlato(int index) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Confirm Deletion'),
        content:
        const Text('Are you sure you want to delete this Plato entry?'),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Cancel')),
          TextButton(
              onPressed: () {
                Navigator.pop(context);
                setState(() =>
                    widget.data[widget.batch]['plato'].removeAt(index));
                widget.saveData();
                _calculatePredictedFG();
              },
              child: const Text('Delete')),
        ],
      ),
    );
  }

  void _editPlato(int index) {
    final valueController = TextEditingController(
      text: widget.data[widget.batch]['plato'][index]['value'],
    );
    DateTime selectedDate;
    try {
      selectedDate = DateFormat('MM-dd HH:mm')
          .parse(widget.data[widget.batch]['plato'][index]['date']);
      selectedDate = DateTime(
        DateTime.now().year,
        selectedDate.month,
        selectedDate.day,
        selectedDate.hour,
        selectedDate.minute,
      );
    } catch (e) {
      selectedDate = DateTime.now();
    }
    showDialog(
      context: context,
      builder: (context) {
        return StatefulBuilder(builder: (context, setStateDialog) {
          return AlertDialog(
            title: const Text('Edit Plato'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: valueController,
                  decoration:
                  const InputDecoration(labelText: 'Plato Value'),
                ),
                const SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: Text(
                          'Date: ${DateFormat('MM-dd HH:mm').format(selectedDate)}'),
                    ),
                    IconButton(
                        icon: const Icon(Icons.calendar_today),
                        onPressed: () async {
                          DateTime? pickedDate = await showDatePicker(
                            context: context,
                            initialDate: selectedDate,
                            firstDate: DateTime(2000),
                            lastDate: DateTime(2100),
                          );
                          if (pickedDate != null) {
                            TimeOfDay? pickedTime = await showTimePicker(
                              context: context,
                              initialTime:
                              TimeOfDay.fromDateTime(selectedDate),
                            );
                            if (pickedTime != null) {
                              setStateDialog(() {
                                selectedDate = DateTime(
                                  pickedDate.year,
                                  pickedDate.month,
                                  pickedDate.day,
                                  pickedTime.hour,
                                  pickedTime.minute,
                                );
                              });
                            }
                          }
                        }),
                  ],
                ),
              ],
            ),
            actions: [
              TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('Cancel')),
              TextButton(
                  onPressed: () {
                    final newPlato = valueController.text.trim();
                    if (newPlato.isNotEmpty) {
                      setState(() {
                        widget.data[widget.batch]['plato'][index]['value'] =
                            newPlato;
                        widget.data[widget.batch]['plato'][index]['date'] =
                            DateFormat('MM-dd HH:mm').format(selectedDate);
                      });
                      widget.saveData();
                      Navigator.pop(context);
                      _calculatePredictedFG();
                    }
                  },
                  child: const Text('Save')),
            ],
          );
        });
      },
    );
  }

  /// Plato를 Specific Gravity (SG)로 변환 (Balling 공식 참고)
  double platoToSG(double plato) {
    return 1 + (plato / (258.6 - ((plato / 258.2) * 227.1)));
  }

  /// ABV% 계산: (OG - SG) * 131.25
  double calculateABV(double currentPlato, double initialPlato) {
    final og = platoToSG(initialPlato);
    final sg = platoToSG(currentPlato);
    return (og - sg) * 131.25;
  }

  double? getEstimatedALC() {
    if (predictedFG != null && widget.data[widget.batch]['plato'].isNotEmpty) {
      final initialPlato = double.tryParse(
          widget.data[widget.batch]['plato'][0]['value']);
      if (initialPlato != null) {
        return calculateABV(predictedFG!, initialPlato);
      }
    }
    return null;
  }

  /// 그래프 빌드
  /// 좌측 Y축은 Plato, 우측 Y축은 ALC%를 별도로 tick 표시
  Widget _buildLineChart(List<dynamic> platoList) {
    if (platoList.isEmpty) {
      return const Center(
        child: Text('No plato values available to display chart'),
      );
    }
    final List<FlSpot> spots = [];
    final Map<double, String> dateLabels = {};
    for (int i = 0; i < platoList.length; i++) {
      final point = platoList[i];
      final yValue = double.tryParse(point['value']) ?? 0;
      spots.add(FlSpot(i.toDouble(), yValue));
      dateLabels[i.toDouble()] = point['date'];
    }
    double minY = spots.map((s) => s.y).reduce((a, b) => a < b ? a : b);
    double maxY = spots.map((s) => s.y).reduce((a, b) => a > b ? a : b);
    if (minY == maxY) {
      minY = minY - 1;
      maxY = maxY + 1;
    }
    double? initialPlato;
    if (widget.data[widget.batch]['plato'].isNotEmpty) {
      initialPlato = double.tryParse(
          widget.data[widget.batch]['plato'][0]['value']);
    }
    return Padding(
      padding: const EdgeInsets.all(8.0),
      child: LineChart(
        LineChartData(
          clipData: FlClipData.all(),
          minY: minY,
          maxY: maxY,
          gridData: FlGridData(show: true),
          borderData: FlBorderData(show: true),
          lineBarsData: [
            LineChartBarData(
              spots: spots,
              isCurved: true,
              barWidth: 3,
              dotData: FlDotData(show: true),
            ),
          ],
          titlesData: FlTitlesData(
            bottomTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 40,
                interval: 1,
                getTitlesWidget: (double value, TitleMeta meta) {
                  final label = dateLabels[value];
                  if (label == null) {
                    return SideTitleWidget(meta: meta, child: const Text(''));
                  }
                  final parts = label.split(' ');
                  final datePart = parts.isNotEmpty ? parts[0] : '';
                  final timePart = parts.length > 1 ? parts[1] : '';
                  return SideTitleWidget(
                    meta: meta,
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Text(datePart, style: const TextStyle(fontSize: 10)),
                        Text(timePart, style: const TextStyle(fontSize: 10)),
                      ],
                    ),
                  );
                },
              ),
            ),
            leftTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 45,
                interval: (maxY - minY) / 5,
                getTitlesWidget: (double value, TitleMeta meta) {
                  return SideTitleWidget(
                    meta: meta,
                    child: Text(
                      value.toStringAsFixed(0),
                      style: const TextStyle(fontSize: 10),
                    ),
                  );
                },
              ),
              // 좌측 축 제목 "Plato"를 오른쪽으로 90도 회전 (세로로 보임)
              axisNameWidget: RotatedBox(
                quarterTurns: 1,
                child: const Text(
                  "Plato",
                  style: TextStyle(fontSize: 12, color: Colors.white),
                ),
              ),
              axisNameSize: 30,
            ),
            topTitles: AxisTitles(
              sideTitles: SideTitles(showTitles: false),
            ),
            rightTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 45,
                interval: (maxY - minY) / 5,
                getTitlesWidget: (double value, TitleMeta meta) {
                  if (initialPlato == null) {
                    return SideTitleWidget(meta: meta, child: const Text(''));
                  }
                  double abv = calculateABV(value, initialPlato);
                  return SideTitleWidget(
                    meta: meta,
                    child: Text('${abv.toStringAsFixed(1)}%', style: const TextStyle(fontSize: 10)),
                  );
                },
              ),
              // 우측 축 제목 "ALC%"를 오른쪽으로 90도 회전 (세로로 보임)
              axisNameWidget: RotatedBox(
                quarterTurns: 1,
                child: const Text(
                  "ALC%",
                  style: TextStyle(fontSize: 12, color: Colors.white),
                ),
              ),
              axisNameSize: 30,
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final platoList = widget.data[widget.batch]['plato'] as List<dynamic>;
    final estimatedALC = getEstimatedALC();
    return Scaffold(
      appBar: AppBar(
        title: Text('Plato for ${widget.batch}'),
      ),
      body: Column(
        children: [
          // Plato 입력 Row
          Padding(
            padding: const EdgeInsets.all(10),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: platoController,
                    decoration: const InputDecoration(hintText: 'Enter Plato'),
                    onSubmitted: (_) => _savePlato(),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _savePlato,
                  child: const Text('Save'),
                ),
              ],
            ),
          ),
          // 효모(발효율) 입력 및 예측 FG / Estimated ALC% Row (그래프 위쪽에 위치)
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: fermentationController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      hintText: 'Enter fermentation% (Example 80%)',
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      predictedFG != null
                          ? 'Predicted FG: ${predictedFG!.toStringAsFixed(2)}'
                          : 'Predicted FG: -',
                      style: const TextStyle(fontSize: 14),
                    ),
                    Text(
                      estimatedALC != null
                          ? 'Estimated ALC%: ${estimatedALC.toStringAsFixed(1)}%'
                          : 'Estimated ALC%: -',
                      style: const TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ],
            ),
          ),
          // 목표 Plato 예측 입력 및 버튼 Row
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 5),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: targetPlatoController,
                    keyboardType: TextInputType.number,
                    decoration: const InputDecoration(
                      hintText: 'Enter target Plato (Example 10)',
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                ElevatedButton(
                  onPressed: _predictTargetTime,
                  child: const Text('Predict Target Time'),
                ),
              ],
            ),
          ),
          // 예측 결과 표시 박스
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 3),
            child: Text(
              predictionResult,
              style: const TextStyle(fontSize: 14, color: Colors.amber),
            ),
          ),
          // Plato 항목 리스트 (스크롤 가능)
          Expanded(
            child: platoList.isEmpty
                ? const Center(child: Text('Your batch list is empty. Create your first batch!'))
                : ListView.builder(
              itemCount: platoList.length,
              itemBuilder: (context, index) {
                final item = platoList[index];
                return ListTile(
                  title: Text('Plato: ${item['value']} | ${item['date']}'),
                  trailing: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                          icon: const Icon(Icons.edit),
                          onPressed: () => _editPlato(index)),
                      IconButton(
                          icon: const Icon(Icons.delete),
                          onPressed: () => _confirmDeletePlato(index)),
                    ],
                  ),
                );
              },
            ),
          ),
          // 그래프 영역: 높이 220, 하단 Padding 추가하여 overflow 방지
          Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: Container(
              height: 220,
              child: _buildLineChart(platoList),
            ),
          ),
        ],
      ),
    );
  }
}
